// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/TwoStepSDFM_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// runARDL
Rcpp::List runARDL(Rcpp::NumericVector target_variable, Rcpp::NumericVector target_variable_predictor, Rcpp::NumericVector predictor_variable, const unsigned max_target_lags, const unsigned max_predictor_lags, const std::string crit);
RcppExport SEXP _TwoStepSDFM_runARDL(SEXP target_variableSEXP, SEXP target_variable_predictorSEXP, SEXP predictor_variableSEXP, SEXP max_target_lagsSEXP, SEXP max_predictor_lagsSEXP, SEXP critSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type target_variable(target_variableSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type target_variable_predictor(target_variable_predictorSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type predictor_variable(predictor_variableSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type max_target_lags(max_target_lagsSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type max_predictor_lags(max_predictor_lagsSEXP);
    Rcpp::traits::input_parameter< const std::string >::type crit(critSEXP);
    rcpp_result_gen = Rcpp::wrap(runARDL(target_variable, target_variable_predictor, predictor_variable, max_target_lags, max_predictor_lags, crit));
    return rcpp_result_gen;
END_RCPP
}
// runSDFMKFS
Rcpp::List runSDFMKFS(Rcpp::NumericMatrix X_in, Rcpp::IntegerVector delay, Rcpp::IntegerVector selected, int R, int order, bool decorr_errors, const char* crit, double l2, Rcpp::NumericVector l1, int max_iterations, int steps, double comp_null, bool check_rank, double conv_crit, double conv_threshold, bool log, double KFS_conv_crit, const bool parallel, const unsigned fcast_horizon);
RcppExport SEXP _TwoStepSDFM_runSDFMKFS(SEXP X_inSEXP, SEXP delaySEXP, SEXP selectedSEXP, SEXP RSEXP, SEXP orderSEXP, SEXP decorr_errorsSEXP, SEXP critSEXP, SEXP l2SEXP, SEXP l1SEXP, SEXP max_iterationsSEXP, SEXP stepsSEXP, SEXP comp_nullSEXP, SEXP check_rankSEXP, SEXP conv_critSEXP, SEXP conv_thresholdSEXP, SEXP logSEXP, SEXP KFS_conv_critSEXP, SEXP parallelSEXP, SEXP fcast_horizonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type X_in(X_inSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type delay(delaySEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type selected(selectedSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< bool >::type decorr_errors(decorr_errorsSEXP);
    Rcpp::traits::input_parameter< const char* >::type crit(critSEXP);
    Rcpp::traits::input_parameter< double >::type l2(l2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type l1(l1SEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type steps(stepsSEXP);
    Rcpp::traits::input_parameter< double >::type comp_null(comp_nullSEXP);
    Rcpp::traits::input_parameter< bool >::type check_rank(check_rankSEXP);
    Rcpp::traits::input_parameter< double >::type conv_crit(conv_critSEXP);
    Rcpp::traits::input_parameter< double >::type conv_threshold(conv_thresholdSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    Rcpp::traits::input_parameter< double >::type KFS_conv_crit(KFS_conv_critSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    Rcpp::traits::input_parameter< const unsigned >::type fcast_horizon(fcast_horizonSEXP);
    rcpp_result_gen = Rcpp::wrap(runSDFMKFS(X_in, delay, selected, R, order, decorr_errors, crit, l2, l1, max_iterations, steps, comp_null, check_rank, conv_crit, conv_threshold, log, KFS_conv_crit, parallel, fcast_horizon));
    return rcpp_result_gen;
END_RCPP
}
// runStaticFM
Rcpp::List runStaticFM(int T, const int& N, Rcpp::NumericMatrix S, Rcpp::NumericMatrix Lambda, Rcpp::NumericVector mu_e, Rcpp::NumericMatrix Sigma_e, Rcpp::NumericMatrix A, int order, bool quarterfy, bool corr, double beta_param, double m, int seed, int R, int burn_in, bool rescale, const bool parallel);
RcppExport SEXP _TwoStepSDFM_runStaticFM(SEXP TSEXP, SEXP NSEXP, SEXP SSEXP, SEXP LambdaSEXP, SEXP mu_eSEXP, SEXP Sigma_eSEXP, SEXP ASEXP, SEXP orderSEXP, SEXP quarterfySEXP, SEXP corrSEXP, SEXP beta_paramSEXP, SEXP mSEXP, SEXP seedSEXP, SEXP RSEXP, SEXP burn_inSEXP, SEXP rescaleSEXP, SEXP parallelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    Rcpp::traits::input_parameter< const int& >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type mu_e(mu_eSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type Sigma_e(Sigma_eSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type order(orderSEXP);
    Rcpp::traits::input_parameter< bool >::type quarterfy(quarterfySEXP);
    Rcpp::traits::input_parameter< bool >::type corr(corrSEXP);
    Rcpp::traits::input_parameter< double >::type beta_param(beta_paramSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< bool >::type rescale(rescaleSEXP);
    Rcpp::traits::input_parameter< const bool >::type parallel(parallelSEXP);
    rcpp_result_gen = Rcpp::wrap(runStaticFM(T, N, S, Lambda, mu_e, Sigma_e, A, order, quarterfy, corr, beta_param, m, seed, R, burn_in, rescale, parallel));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_TwoStepSDFM_runARDL", (DL_FUNC) &_TwoStepSDFM_runARDL, 6},
    {"_TwoStepSDFM_runSDFMKFS", (DL_FUNC) &_TwoStepSDFM_runSDFMKFS, 19},
    {"_TwoStepSDFM_runStaticFM", (DL_FUNC) &_TwoStepSDFM_runStaticFM, 17},
    {NULL, NULL, 0}
};

RcppExport void R_init_TwoStepSDFM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
